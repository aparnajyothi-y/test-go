name: Generate Large Go Cache

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 1: Setup Go with caching enabled
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true
          check-latest: false

      # Step 2: Create go.mod with heavy dependencies
      - name: Create go.mod
        shell: pwsh
        run: |
          @"
          module bigcachetest

          go 1.22

          require (
            k8s.io/kubernetes v1.30.0
            github.com/moby/moby v25.0.0+incompatible
            github.com/hashicorp/terraform v1.5.7
            github.com/aws/aws-sdk-go v1.49.0
            github.com/prometheus/prometheus v2.53.0+incompatible
            github.com/grafana/grafana v11.0.0+incompatible
            github.com/apache/beam v2.56.0+incompatible
            github.com/google/go-containerregistry v0.18.0
            github.com/grpc/grpc-go v1.61.1
            github.com/istio/istio v1.22.0
            github.com/open-telemetry/opentelemetry-collector v0.105.0
            github.com/hashicorp/consul v1.19.0
          )
          "@ | Out-File -Encoding UTF8 go.mod

      # Step 3: Add a dummy file to make imports reachable
      - name: Create dummy main.go
        shell: pwsh
        run: |
          @"
          package main

          import (
            _ "k8s.io/kubernetes"
            _ "github.com/moby/moby"
            _ "github.com/hashicorp/terraform"
            _ "github.com/aws/aws-sdk-go/aws"
            _ "github.com/prometheus/prometheus"
            _ "github.com/grafana/grafana"
            _ "github.com/apache/beam"
            _ "github.com/google/go-containerregistry/pkg/v1"
            _ "github.com/grpc/grpc-go"
            _ "github.com/istio/istio"
            _ "github.com/open-telemetry/opentelemetry-collector"
            _ "github.com/hashicorp/consul"
          )

          func main() {}
          "@ | Out-File -Encoding UTF8 main.go

      # Step 4: Download and build module cache
      - name: Download Go modules
        shell: pwsh
        run: |
          go mod tidy
          go mod download all
          if (Test-Path go.sum) {
            Write-Host "‚úÖ go.sum generated successfully."
          } else {
            Write-Error "‚ùå go.sum not found!"
          }

      # Step 5: Verify cache directories and size
      - name: Check Go cache size
        shell: pwsh
        run: |
          $modCache = (go env GOMODCACHE)
          $buildCache = (go env GOCACHE)
          Write-Host "Module cache path: $modCache"
          Write-Host "Build cache path: $buildCache"

          if (Test-Path $modCache) {
            $sizeGB = (Get-ChildItem -Recurse $modCache | Measure-Object -Property Length -Sum).Sum / 1GB
            Write-Host ("üì¶ Go module cache size: {0:N2} GB" -f $sizeGB)
          } else {
            Write-Host "‚ö†Ô∏è Module cache not found."
          }

          if (Test-Path $buildCache) {
            $sizeGB2 = (Get-ChildItem -Recurse $buildCache | Measure-Object -Property Length -Sum).Sum / 1GB
            Write-Host ("üõ†Ô∏è  Go build cache size: {0:N2} GB" -f $sizeGB2)
          } else {
            Write-Host "‚ö†Ô∏è Build cache not found."
          }
