name: Generate Large Go Cache

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true

      - name: Create go.mod with heavy dependencies
        shell: pwsh
        run: |
          @"
          module bigcachetest
          go 1.22

          require (
            k8s.io/apimachinery v0.30.0
            k8s.io/client-go v0.30.0
            github.com/aws/aws-sdk-go v1.49.0
            github.com/google/go-containerregistry v0.18.0
            github.com/prometheus/client_golang v1.19.0
            github.com/hashicorp/consul v1.19.0
            github.com/grpc/grpc-go v1.61.1
            github.com/apache/beam v2.56.0+incompatible
            github.com/istio/istio v1.22.0
            github.com/open-telemetry/opentelemetry-collector v0.105.0
          )
          "@ | Out-File -Encoding UTF8 go.mod

      - name: Create dummy main.go
        shell: pwsh
        run: |
          @"
          package main
          import (
            "fmt"
            _ "k8s.io/apimachinery/pkg/apis/meta/v1"
            _ "k8s.io/client-go/kubernetes"
            _ "github.com/aws/aws-sdk-go/aws"
            _ "github.com/google/go-containerregistry/pkg/v1"
            _ "github.com/prometheus/client_golang/prometheus"
            _ "github.com/hashicorp/consul/api"
            _ "github.com/grpc/grpc-go"
            _ "github.com/apache/beam"
            _ "github.com/istio/istio"
            _ "github.com/open-telemetry/opentelemetry-collector"
          )
          func main() {
            fmt.Println("Generating large Go module cache...")
          }
          "@ | Out-File -Encoding UTF8 main.go

      - name: Download Go modules and build cache
        shell: pwsh
        run: |
          Write-Host "Running go mod tidy..."
          go mod tidy -v
          Write-Host "Running go mod download..."
          go mod download -x
          if (Test-Path go.sum) {
            Write-Host "‚úÖ go.sum generated successfully."
          } else {
            Write-Error "‚ùå go.sum not found!"
          }

          Write-Host "Building binary to populate cache..."
          go build -v -o main.exe .

      - name: Check Go cache size
        shell: pwsh
        run: |
          $modCache = (go env GOMODCACHE)
          $buildCache = (go env GOCACHE)

          Write-Host "Module cache path: $modCache"
          Write-Host "Build cache path: $buildCache"

          if (Test-Path $modCache) {
            $sizeGB = (Get-ChildItem -Recurse $modCache -ErrorAction SilentlyContinue | Measure-Object -Property Length -Sum).Sum / 1GB
            Write-Host ("üì¶ Go module cache size: {0:N2} GB" -f $sizeGB)
          }

          if (Test-Path $buildCache) {
            $sizeGB2 = (Get-ChildItem -Recurse $buildCache -ErrorAction SilentlyContinue | Measure-Object -Property Length -Sum).Sum / 1GB
            Write-Host ("üõ†Ô∏è Go build cache size: {0:N2} GB" -f $sizeGB2)
          }
